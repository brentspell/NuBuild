<?xml version="1.0" encoding="utf-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003" ToolsVersion="4.0">
   <!-- NuBuild Tasks -->
   <Import Project="$(MSBuildExtensionsPath32)\NuBuild\v1\NuBuild.tasks" />
   <!-- MSBuild 4.5 Properties -->
   <PropertyGroup>
      <OutputPath Condition="'$(OutDir)' != '' AND '$(GenerateProjectSpecificOutputFolder)' == 'true'">$(OutDir)\$(MSBuildProjectName)</OutputPath>
      <OutputPath Condition="'$(OutDir)' != '' AND '$(GenerateProjectSpecificOutputFolder)' != 'true'">$(OutDir)</OutputPath>
   </PropertyGroup>
   <!-- NuBuild Properties -->
   <PropertyGroup>
      <OutputPath Condition="'$(OutputPath)' != '' and !HasTrailingSlash('$(OutputPath)')">$(OutputPath)\</OutputPath>
      <Platform Condition="'$(Platform)' == ''">AnyCPU</Platform>
      <Configuration Condition="'$(Configuration)' == ''">Debug</Configuration>
      <TargetFrameworkVersion Condition="'$(TargetFrameworkVersion)' == ''">v4.5</TargetFrameworkVersion>
      <!-- Property: NuBuildVersionSource
         . specifies whether/how the package version string is generated
         . Manual:   manage in .nuspec file by hand
         . Library:  (default) retrieve from a library referenced by the package
         . Auto:     generate from a build number file
      -->
      <NuBuildVersionSource Condition="'$(NuBuildVersionSource)' == ''">library</NuBuildVersionSource>
      <!-- Property: NuBuildVersionFileName
         . specifies whether to include the version number in the compiled 
           package file name
      -->
      <NuBuildVersionFileName Condition="'$(NuBuildVersionFileName)' == ''">false</NuBuildVersionFileName>
      <!-- Properties: NuBuildIncludePdbs
         . specifies whether to automatically add PDB files for assemblies
           automatically added to the package
      -->
      <NuBuildIncludePdbs Condition="'$(NuBuildIncludePdbs)' == ''">false</NuBuildIncludePdbs>
      <!-- Properties: NuBuildAddBinariesToSubfolder
         . specifies whether to add binaries (.dll and .exe files) from referenced projects into subfolders
         (eg. lib\net40) based on TargetFrameworkVersion
      -->
      <NuBuildAddBinariesToSubfolder Condition="'$(NuBuildAddBinariesToSubfolder)' == ''">false</NuBuildAddBinariesToSubfolder>
      <TargetFrameworkIdentifier>.NETFramework</TargetFrameworkIdentifier>
      <TargetFrameworkMoniker Condition="'$(TargetFrameworkMoniker)' == '' and '$(TargetFrameworkProfile)' != ''">$(TargetFrameworkIdentifier),Version=$(TargetFrameworkVersion),Profile=$(TargetFrameworkProfile)</TargetFrameworkMoniker>
      <TargetFrameworkMoniker Condition="'$(TargetFrameworkMoniker)' == ''">$(TargetFrameworkIdentifier),Version=$(TargetFrameworkVersion)</TargetFrameworkMoniker>
   </PropertyGroup>
   <!-- Target: GetCopyToOutputDirectoryItems 
      . determines additional files to output directory
   -->
   <Target Name="__GetCopyToOutputDirectoryItems"
           Returns="@(CopyToOutputDirectoryItems)">
      <AssignTargetPath Files="@(Content)" RootFolder="$(MSBuildProjectDirectory)">
         <Output TaskParameter="AssignedFiles" ItemName="ContentWithTargetPath" />
      </AssignTargetPath>
      <ItemGroup>
         <_SourceItemsToCopyToOutputDirectoryAlways KeepMetadata="CopyToOutputDirectory;TargetPath" Include="@(ContentWithTargetPath->'%(FullPath)')" Condition="'%(ContentWithTargetPath.CopyToOutputDirectory)'=='Always'"/>
         <_SourceItemsToCopyToOutputDirectory       KeepMetadata="CopyToOutputDirectory;TargetPath" Include="@(ContentWithTargetPath->'%(FullPath)')" Condition="'%(ContentWithTargetPath.CopyToOutputDirectory)'=='PreserveNewest'"/>
      </ItemGroup>
      <ItemGroup>
         <CopyToOutputDirectoryItems                Include="@(_SourceItemsToCopyToOutputDirectoryAlways->'%(FullPath)');@(_SourceItemsToCopyToOutputDirectory->'%(FullPath)')"/>
      </ItemGroup>
   </Target>
   <!-- Target: Prepare 
      . initializes the Compile build items, adding custom metadata
      . generates the NuSources and NuTargets items for incremental building
   -->
   <Target Name="__Prepare"
           DependsOnTargets="__GetCopyToOutputDirectoryItems">
      <MSBuild Projects="@(ProjectReference)" UseResultsCache="true">
         <Output TaskParameter="TargetOutputs" ItemName="__ReferenceLibraries" />
      </MSBuild>
      <NuPrepare NuSpec="@(Compile)"
                 ProjectName="$(MSBuildProjectName)"
                 VersionSource="$(NuBuildVersionSource)"
                 VersionFileName="$(NuBuildVersionFileName)"
                 OutputPath="$(OutputPath)"
                 BuildNumber="$(BuildNumber)"
                 ReferenceLibraries="@(__ReferenceLibraries)">
         <Output TaskParameter="NuSpec" ItemName="NuPrepared"/>
         <Output TaskParameter="Sources" ItemName="NuSources"/>
         <Output TaskParameter="Targets" ItemName="NuTargets"/>
      </NuPrepare>
      <ItemGroup>
         <NuSources Include="$(MSBuildProjectFile);"/>
      </ItemGroup>
      <ItemGroup>
         <NuTargets Include="@(CopyToOutputDirectoryItems);"/>
      </ItemGroup>
      <Message Text="NuSources: @(NuSources)"/>
      <Message Text="NuTargets: @(NuTargets)"/>
   </Target>
   <!-- Target: Clean 
      . removes all .nupkg files from the output path
   -->
   <Target Name="Clean" DependsOnTargets="__Prepare;BeforeClean">
      <Delete Files="@(NuTargets)"/>
      <CallTarget Targets="AfterClean"/>
   </Target>
   <!-- Target: Build 
      . creates a .nupkg file for each .nuspec file in the project
   -->
   <Target Name="Build"
           DependsOnTargets="__Prepare;BeforeBuild"
           Inputs="@(NuSources)"
           Outputs="@(NuTargets)">
      <NuPackage ProjectPath="$(MSBuildProjectFullPath)"
                 NuSpec="@(NuPrepared)"
                 OutputPath="$(OutputPath)"
                 ReferenceLibraries="@(__ReferenceLibraries)"
                 AddBinariesToSubfolder="$(NuBuildAddBinariesToSubfolder)"
                 IncludePdbs="$(NuBuildIncludePdbs)"/>
      <Message Text="%(NuPrepared.Filename) -> %(NuPrepared.NuPackagePath)" Importance="high"/>
      <CallTarget Targets="__CopySourceItemsToOutputDirectory"/>
      <CallTarget Targets="AfterBuild"/>
   </Target>
   <!-- Target: Rebuild 
      . runs a clean and then a build
   -->
   <Target Name="Rebuild" DependsOnTargets="Clean;Build;">
   </Target>
   <!-- Target: CopySourceItemsToOutputDirectory 
      . copies additional files to output directory
   -->
   <Target Name="__CopySourceItemsToOutputDirectory"
           DependsOnTargets="__GetCopyToOutputDirectoryItems;__CopyOutOfDateSourceItemsToOutputDirectory;__CopyOutOfDateSourceItemsToOutputDirectoryAlways"/>
   <Target Name="__CopyOutOfDateSourceItemsToOutputDirectory"
           Condition=" '@(_SourceItemsToCopyToOutputDirectory)' != '' "
           Inputs="@(_SourceItemsToCopyToOutputDirectory)"
           Outputs="@(_SourceItemsToCopyToOutputDirectory->'$(OutputPath)%(TargetPath)')">
      <Copy SourceFiles = "@(_SourceItemsToCopyToOutputDirectory)"
            DestinationFiles = "@(_SourceItemsToCopyToOutputDirectory->'$(OutputPath)%(TargetPath)')"
            OverwriteReadOnlyFiles="true"/>
   </Target>
   <Target Name="__CopyOutOfDateSourceItemsToOutputDirectoryAlways"
           Condition=" '@(_SourceItemsToCopyToOutputDirectoryAlways)' != '' ">
      <Copy SourceFiles = "@(_SourceItemsToCopyToOutputDirectoryAlways)"
            DestinationFiles = "@(_SourceItemsToCopyToOutputDirectoryAlways->'$(OutputPath)%(TargetPath)')"
            OverwriteReadOnlyFiles="true"/>
   </Target>
   <!-- Dummy targets required for Visual Studio -->
   <Target Name="GetFrameworkPaths"/>
   <Target Name="ResolveAssemblyReferences"/>
   <!-- User Targets -->
   <Target Name="BeforeClean"/>
   <Target Name="AfterClean"/>
   <Target Name="BeforeBuild"/>
   <Target Name="AfterBuild"/>
</Project>
