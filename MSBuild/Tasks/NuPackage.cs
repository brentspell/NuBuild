//===========================================================================
// MODULE:  NuPackage.cs
// PURPOSE: NuBuild package MSBuild task
// 
// Copyright © 2012
// Brent M. Spell. All rights reserved.
//
// This library is free software; you can redistribute it and/or modify it 
// under the terms of the GNU Lesser General Public License as published 
// by the Free Software Foundation; either version 3 of the License, or 
// (at your option) any later version. This library is distributed in the 
// hope that it will be useful, but WITHOUT ANY WARRANTY; without even the 
// implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
// See the GNU Lesser General Public License for more details. You should 
// have received a copy of the GNU Lesser General Public License along with 
// this library; if not, write to 
//    Free Software Foundation, Inc. 
//    51 Franklin Street, Fifth Floor 
//    Boston, MA 02110-1301 USA
//===========================================================================
// System References
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.IO;
using System.Linq;
using System.Text;
using System.Reflection;
using System.Runtime.Versioning;
using System.Diagnostics;
using Microsoft.Build.Framework;
using Microsoft.Build.Utilities;
using NuGet;
// Project References

namespace NuBuild.MSBuild
{
   /// <summary>
   /// Package task
   /// </summary>
   /// <remarks>
   /// This task compiles a set of .nuspec items into a corresponding set
   /// of NuGet packages (.nupkg) files.
   /// </remarks>
   public sealed class NuPackage : Task, NuGet.IPropertyProvider
   {
      private string version;
      private IPropertyProvider propertyProvider;

      #region Task Parameters
      /// <summary>
      /// The full project path
      /// </summary>
      [Required]
      public String ProjectPath { get; set; }
      /// <summary>
      /// The source .nuspec file items
      /// </summary>
      [Required]
      public ITaskItem[] NuSpec { get; set; }
      /// <summary>
      /// The EmbeddedResource file items
      /// </summary>
      [Required]
      public ITaskItem[] Embedded { get; set; }
      /// <summary>
      /// The project output directory path
      /// </summary>
      [Required]
      public String OutputPath { get; set; }
      /// <summary>
      /// The list of projects referenced by the current
      /// NuGet project
      /// </summary>
      public ITaskItem[] ReferenceProjects { get; set; }
      /// <summary>
      /// The list of DLLs referenced by the current
      /// NuGet project
      /// </summary>
      public ITaskItem[] ReferenceLibraries { get; set; }
      /// <summary>
      /// Specifies whether to add binaries (.dll and .exe files) from referenced projects into subfolders
      /// (eg. lib\net40) based on TargetFrameworkVersion 
      /// </summary>
      public Boolean AddBinariesToSubfolder { get; set; }
      /// <summary>
      /// Specifies whether to add frameworkAssemblies and dependencies tags based on referenced projects
      /// </summary>
      public Boolean AutoGenerateDependencies { get; set; }
      /// <summary>
      /// Specifies whether to add frameworkAssemblies and dependencies tags based on referenced projects recursively
      /// </summary>
      public Boolean AutoGenerateDependenciesRecursively { get; set; }
      /// <summary>
      /// Specifies whether to add PDB files for binaries
      /// automatically to the package
      /// </summary>
      public Boolean IncludePdbs { get; set; }
      #endregion

      /// <summary>
      /// Task execution override
      /// </summary>
      /// <returns>
      /// True if successful
      /// False otherwise
      /// </returns>
      public override Boolean Execute ()
      {
         try
         {
            Debug.WriteLine("\n=== NuPackage on {0} ===", (object)Path.GetFileName(ProjectPath));

            // prepare the task for execution
            if (this.ReferenceProjects == null)
               this.ReferenceProjects = new ITaskItem[0];
            if (this.ReferenceLibraries == null)
               this.ReferenceLibraries = new ITaskItem[0];
            this.OutputPath = Path.GetFullPath(this.OutputPath);
            propertyProvider = new PropertyProvider(ProjectPath, ReferenceLibraries
                .Where(libItem => 
                {
                    var copyLocal = libItem.GetMetadata("Private");
                    return String.IsNullOrEmpty(copyLocal) || String.Compare(copyLocal, "false", true) != 0;
                }).ToArray());
            // compile the nuget package
            foreach (var specItem in this.NuSpec)
               BuildPackage(specItem);
         }
         catch (Exception e)
         {
            Log.LogError("{0} ({1})", e.Message, e.GetType().Name);
            return false;
         }
         return true;
      }
      /// <summary>
      /// Compiles a single .nuspec file
      /// </summary>
      /// <param name="specItem">
      /// The .nuspec file to compile
      /// </param>
      private void BuildPackage (ITaskItem specItem)
      {
         // load the package manifest (nuspec) from the task item
         // using the nuget package builder
         var specPath = specItem.GetMetadata("FullPath");
         var builder = new NuGet.PackageBuilder(
            specPath,
            this as NuGet.IPropertyProvider,
            true
         );
         // initialize dynamic manifest properties
         version = specItem.GetMetadata("NuPackageVersion");
         if (!String.IsNullOrEmpty(version))
            builder.Version = new NuGet.SemanticVersion(version);
         // add required frameworkAssemblies and dependencies based on each project
         // referenced by the current project
         if (AutoGenerateDependencies)
            AddDependencies(builder);
         // add a new file to the lib/tools/content folder for each project
         // referenced by the current project
         AddLibraries(builder);
         // add a new file to the tools/content folder for each project
         // specified as embedded resource by the current project
         AddEmbedded(builder);
         // write the configured package out to disk
         var pkgPath = specItem.GetMetadata("NuPackagePath");
         using (var pkgFile = File.Create(pkgPath))
            builder.Save(pkgFile);
      }
      #region Printing DEBUG info
      [Conditional("DEBUG")]
      private void Print(HashSet<ProjectFactory> referenceProjectFactories)
      {
         foreach (var referenceProjectFactory in referenceProjectFactories)
            Debug.WriteLine(" {0} | {1}", referenceProjectFactory.TargetFramework, Path.GetFileName(referenceProjectFactory.FullPath));
      }
      [Conditional("DEBUG")]
      private void Print(Dictionary<FrameworkName, HashSet<string>> frameworkAssembliesByFramework)
      {
         foreach (var frameworkAssemblyByFramework in frameworkAssembliesByFramework)
         {
            Debug.WriteLine(" {0}", (object)frameworkAssemblyByFramework.Key);
            foreach (var frameworkAssembly in frameworkAssemblyByFramework.Value)
               Debug.WriteLine("  {0}", (object)frameworkAssembly);
         }
      }
      [Conditional("DEBUG")]
      private void Print(Dictionary<FrameworkName, Dictionary<String, Tuple<IPackage, PackageDependency>>> packagesAndDependenciesByFramework)
      {
         foreach (var packagesAndDependencyByFramework in packagesAndDependenciesByFramework)
         {
            Debug.WriteLine(" {0}", (object)packagesAndDependencyByFramework.Key);
            foreach (var packagesAndDependency in packagesAndDependencyByFramework.Value)
               Debug.WriteLine("  {0} | {1} | {2} | {3}", packagesAndDependency.Key, packagesAndDependency.Value.Item1.Title, packagesAndDependency.Value.Item2.VersionSpec.MinVersion, packagesAndDependency.Value.Item2.VersionSpec.MaxVersion);
         }
      }
      private void LogMessage(Collection<FrameworkAssemblyReference> frameworkReferences)
      {
         Debug.WriteLine("frameworkAssemblies after removing referred package's FrameworkAssemblies");
         if (frameworkReferences.Count > 0)
            Log.LogMessage(MessageImportance.High, "Auto <frameworkAssemblies>");
         foreach (var far in frameworkReferences)
         {
            var sb = new StringBuilder();
            sb.Append(" ");
            sb.Append(far.AssemblyName);
            sb.Append(" | ");
            bool first = true;
            foreach (var fn in far.SupportedFrameworks)
            {
               if (first)
                  first = false;
               else
                  sb.Append(", ");
               sb.Append(fn.FullName);
            }
            var message = sb.ToString();
            Debug.WriteLine(message);
            Log.LogMessage(MessageImportance.High, message);
         }
      }
      private void LogMessage(Collection<PackageDependencySet> dependencySets)
      {
         Debug.WriteLine("packagesAndDependencies minimum set with referred top level packages");
         if (dependencySets.Count > 0)
            Log.LogMessage(MessageImportance.High, "Auto <dependencies>");
         foreach (var pds in dependencySets)
         {
            var sb = new StringBuilder();
            sb.Append(" ");
            sb.Append(pds.TargetFramework == null ? "framework independent" : pds.TargetFramework.ToString());
            foreach (var pd in pds.Dependencies)
            {
               sb.Append("\n  ");
               sb.Append(pd.Id);
               sb.Append(" | ");
               sb.Append(pd.VersionSpec.ToString());
            }
            var message = sb.ToString();
            Debug.WriteLine(message);
            Log.LogMessage(MessageImportance.High, message);
         }
      }
      private void LogMessage(List<ProjectFactory> projectFactories)
      {
         Debug.WriteLine("recursively referred projects to add as libraries (non top level and non referred by referred nuget packages)");
         if (projectFactories.Count > 0)
            Log.LogMessage(MessageImportance.High, "Auto <files>");
         foreach (var projectFactory in projectFactories)
         {
            var message = string.Format(" {0} | {1}", projectFactory.TargetFramework, Path.GetFileName(projectFactory.FullPath));
            Debug.WriteLine(message);
            Log.LogMessage(MessageImportance.High, message);
         }
      }
      #endregion
      /// <summary>
      /// Adds framework assembly and package dependencies to the package
      /// </summary>
      /// <param name="builder">
      /// The current package builder
      /// </param>
      private void AddDependencies(NuGet.PackageBuilder builder)
      {
         #region variables
         var projectFactoryEqualityComparer = new ProjectFactoryEqualityComparer();
         var topLevelReferenceProjectFactories = new HashSet<ProjectFactory>(projectFactoryEqualityComparer);
         var referenceProjectFactories = new HashSet<ProjectFactory>(projectFactoryEqualityComparer);
         var topLevelNuBuildReferenceProjectFactories = new HashSet<ProjectFactory>(projectFactoryEqualityComparer);
         var nuBuildReferenceProjectFactories = new HashSet<ProjectFactory>(projectFactoryEqualityComparer);
         var targetFrameworks = new HashSet<FrameworkName>();
         var frameworkAssembliesByFramework = new Dictionary<FrameworkName, HashSet<string>>();
         var packagesAndDependenciesByFramework = new Dictionary<FrameworkName, Dictionary<string, Tuple<IPackage, PackageDependency>>>();
         #endregion

         #region collecting reference information
         // collecting reference information to variables
         foreach (var prjPath in this
            .ReferenceProjects
            .FullPath()
            .ValidItem())
         {
            var prjFactory = new ProjectFactory(prjPath);
            topLevelReferenceProjectFactories.Add(prjFactory);
            prjFactory.CollectDependencies(referenceProjectFactories,
               targetFrameworks, frameworkAssembliesByFramework, packagesAndDependenciesByFramework,
               AutoGenerateDependenciesRecursively);

            // debug info after each collection
            Debug.WriteLine("\n--- Project: {0} | {1} ---", prjFactory.TargetFramework, Path.GetDirectoryName(prjFactory.FullPath));
            Debug.WriteLine("topLevelReferenceProjectFactories after CollectDependencies");
            Print(topLevelReferenceProjectFactories);
            Debug.WriteLine("referenceProjectFactories after CollectDependencies");
            Print(referenceProjectFactories);
            Debug.WriteLine("frameworkAssemblies after CollectDependencies");
            Print(frameworkAssembliesByFramework);
            Debug.WriteLine("packagesAndDependencies after CollectDependencies");
            Print(packagesAndDependenciesByFramework);
         }
         // collecting nubuild reference information to variables
         foreach (var prjPath in this
            .ReferenceProjects
            .FullPath()
            .NuspecItem())
         {
            var prjFactory = new ProjectFactory(prjPath);
            topLevelNuBuildReferenceProjectFactories.Add(prjFactory);
            prjFactory.CollectNuBuildDependencies(nuBuildReferenceProjectFactories,
               targetFrameworks, frameworkAssembliesByFramework, packagesAndDependenciesByFramework,
               AutoGenerateDependenciesRecursively);

            // debug info after each collection
            Debug.WriteLine("\n--- Project: {0} | {1} ---", prjFactory.TargetFramework, Path.GetDirectoryName(prjFactory.FullPath));
            Debug.WriteLine("topLevelNuBuildReferenceProjectFactories after CollectNuBuildDependencies");
            Print(topLevelNuBuildReferenceProjectFactories);
            Debug.WriteLine("nuBuildReferenceProjectFactories after CollectNuBuildDependencies");
            Print(nuBuildReferenceProjectFactories);
         }
         #endregion

         #region processing reference information
         Debug.WriteLine("\n--- Handling project references ---");
         var optimizedZipPackages = new Dictionary<string, OptimizedZipPackage>();

         Debug.WriteLine("adding referred top level NuBuild projects to dependencies by each targetFramework");
         foreach (var prjFactory in topLevelNuBuildReferenceProjectFactories)
         {
            Debug.WriteLine(" project: {0}", (object)Path.GetFileName(prjFactory.FullPath));
            foreach (var nuTarget in prjFactory.NuTargets)
            {
               Debug.WriteLine("  package: {0}", (object)Path.GetFileName(nuTarget));
               OptimizedZipPackage package;
               if (!optimizedZipPackages.TryGetValue(nuTarget, out package))
                  optimizedZipPackages.Add(nuTarget, package = new OptimizedZipPackage(nuTarget));
               var dependency = new PackageDependency(package.Id, new VersionSpec()
                  {
                     IsMinInclusive = true,
                     MinVersion = package.Version,
                  });
               foreach (var targetFramework in targetFrameworks)
               {
                  Debug.WriteLine("   dependency: {0} | {1} | {2}", targetFramework, dependency.Id, dependency.VersionSpec);
                  packagesAndDependenciesByFramework[targetFramework].Add(
                     package.Id, new Tuple<IPackage, PackageDependency>(package, dependency));
               }
            }
         }

         Debug.WriteLine("collecting lib files from referred NuGet packages by targetFramework");
         var nuGetPackageFilesByFramework = new Dictionary<FrameworkName, HashSet<string>>();
         foreach (var targetFramework in targetFrameworks)
            nuGetPackageFilesByFramework.Add(targetFramework, new HashSet<string>());
         foreach (var prjFactory in nuBuildReferenceProjectFactories)
         {
            Debug.WriteLine(" project: {0}", (object)Path.GetFileName(prjFactory.FullPath));
            foreach (var nuTarget in prjFactory.NuTargets)
            {
               Debug.WriteLine("  package: {0}", (object)Path.GetFileName(nuTarget));
               OptimizedZipPackage package;
               if (!optimizedZipPackages.TryGetValue(nuTarget, out package))
                  optimizedZipPackages.Add(nuTarget, package = new OptimizedZipPackage(nuTarget));
               foreach (var libFile in package.GetLibFiles()
                  .Where(lf =>
                     StringComparer.OrdinalIgnoreCase.Compare(Path.GetExtension(lf.EffectivePath), ".dll") == 0 &&
                     !lf.EffectivePath.Contains(@"\")))
               {
                  Debug.WriteLine("   lib file: {0} | {1}", libFile.TargetFramework, libFile.EffectivePath);
                  nuGetPackageFilesByFramework[libFile.TargetFramework].Add(libFile.EffectivePath);
               }
            }
         }
         #endregion

         #region compacting reference information
         Debug.WriteLine("\n--- Compacting ---");
         var dependencySets = new Collection<PackageDependencySet>();
         // reserve only the minimum required dependency information by target framework
         var firstDependenciesAsString = default(string[]);
         foreach (var targetFramework in targetFrameworks)
         {
            Debug.WriteLine("{0}", targetFramework);
            var frameworkAssemblies = frameworkAssembliesByFramework[targetFramework];
            var packagesAndDependencies = packagesAndDependenciesByFramework[targetFramework];
            var packages = packagesAndDependencies.Values.Select(t => t.Item1).ToList();

            // removing FrameworkAssemblies referenced by packages
            Debug.WriteLine(" removing referenced FrameworkAssemblies");
            foreach (var package in packages)
            {
               Debug.WriteLine("  package: {0}", (object)package.Title);
               foreach (var frameworkAssembly in package.FrameworkAssemblies)
               {
                  Debug.WriteLine("   ref: {0}", (object)frameworkAssembly.AssemblyName);
                  if (frameworkAssembly.SupportedFrameworks.Count() == 0 || frameworkAssembly.SupportedFrameworks.Count(fn => fn == targetFramework) != 0)
                     frameworkAssemblies.Remove(frameworkAssembly.AssemblyName);
               }
            }

            // reserve only the minimum set of packages (original NuGet algorythm)
            var dependencies = builder
               .GetCompatiblePackageDependencies(targetFramework)
               .ToDictionary(d => d.Id, StringComparer.OrdinalIgnoreCase);
            // Reduce the set of packages we want to include as dependencies to the minimal set.
            // Normally, packages.config has the full closure included, we only add top level
            // packages, i.e. packages with in-degree 0
            foreach (var package in MinimalSetWalker.GetMinimalSet(packages, targetFramework))
            {
               // Don't add duplicate dependencies
               if (dependencies.ContainsKey(package.Id))
                  continue;
               var dependency = packagesAndDependencies[package.Id].Item2;
               dependencies[dependency.Id] = dependency;
            }

            // check to fit in 1 dependencySet if required
            var addToDependencySets = true;
            if (!AddBinariesToSubfolder)
            {
               if (firstDependenciesAsString == null)
                  firstDependenciesAsString = dependencies.Select(kvp => kvp.Value.ToString()).ToArray();
               else if (firstDependenciesAsString.Length != dependencies.Count ||
                  dependencies.Values.Any(d => !firstDependenciesAsString.Contains(d.ToString())))
               {
                  var dependenciesAsString = dependencies.Values.Select(d => d.ToString()).ToArray();
                  var dependencyMismatch = default(string);
                  if (firstDependenciesAsString.Length <= dependenciesAsString.Length)
                     dependencyMismatch = dependenciesAsString.Where(d => !firstDependenciesAsString.Contains(d)).First();
                  else
                     dependencyMismatch = firstDependenciesAsString.Where(d => !dependenciesAsString.Contains(d)).First();
                  Log.LogError("Dependency '{0}' is not referred from each targetFramework, can't add dependency without enabling multiple frameworks in package.", (object)dependencyMismatch);
                  return;
               }
               else
                  addToDependencySets = false;
            }

            // add to dependency sets
            if (addToDependencySets)
            {
               if (!AddBinariesToSubfolder)
                  dependencySets.Add(new PackageDependencySet(null, dependencies.Values));
               else if (dependencies.Values.Count != 0)
                  dependencySets.Add(new PackageDependencySet(targetFramework, dependencies.Values));
            }
         }
         #endregion

         #region reorganize results
         // reorganise assembly references from "assembly by framework" to "framework by assembly" structure
         var targetFrameworksCount = targetFrameworks.Count;
         var allFrameworkAssemblies = new HashSet<string>(StringComparer.OrdinalIgnoreCase);
         foreach (var assemblies in frameworkAssembliesByFramework.Values)
            foreach (var assembly in assemblies)
               allFrameworkAssemblies.Add(assembly);
         var frameworkReferences = new Collection<FrameworkAssemblyReference>();
         foreach (var assembly in allFrameworkAssemblies)
         {
            var usedInTargetFrameworks = targetFrameworks
               .Where(fn => frameworkAssembliesByFramework[fn].Contains(assembly))
               .ToList();
            if (targetFrameworksCount == 1 || usedInTargetFrameworks.Count == targetFrameworksCount)
               frameworkReferences.Add(new FrameworkAssemblyReference(assembly));
            else
            {
               if (!AddBinariesToSubfolder)
               {
                  Log.LogError("Assembly '{0}' is not referred from each targetFramework, can't add frameworkReference without enabling multiple frameworks in package.", (object)assembly);
                  return;
               }
               frameworkReferences.Add(new FrameworkAssemblyReference(assembly, usedInTargetFrameworks));
            }
         }

         // calculate projects to add as libraries
         var projectFactoriesToAddAsLibraries = referenceProjectFactories
            .Where(pf => !topLevelReferenceProjectFactories.Contains(pf))
            .Where(pf => !nuGetPackageFilesByFramework[pf.TargetFramework].Contains(Path.GetFileName(pf.TargetPath)))
            .ToList();
         #endregion

         #region add final results to builder
         Debug.WriteLine("\n--- Final results ---");
         // log final info
         LogMessage(projectFactoriesToAddAsLibraries);
         LogMessage(frameworkReferences);
         LogMessage(dependencySets);

         // set builder
         foreach (var fr in frameworkReferences)
            if (builder.FrameworkReferences.Any(_fr => string.Compare(_fr.AssemblyName, fr.AssemblyName, true) == 0))
               Log.LogWarning("Same frameworkAssembly reference ({0}) found in .nuspec and in referenced projects, frameworkAssembly reference from the referenced project is skipped!", fr.AssemblyName);
            else
               builder.FrameworkReferences.Add(fr);
         foreach (var pds in dependencySets)
            if (pds.TargetFramework != null && builder.DependencySets.Any(_pds => _pds.TargetFramework == null && _pds.Dependencies.Any(_ds => pds.Dependencies.Any(ds => string.Compare(_ds.Id, ds.Id, true) == 0))))
               Log.LogWarning("Same dependency reference found in .nuspec (without targetFramework) and in referenced projects (with targetFrameWork), dependency reference from the referenced project is skipped!");
            else if (pds.TargetFramework == null && builder.DependencySets.Any(_pds => _pds.TargetFramework != null && _pds.Dependencies.Any(_ds => pds.Dependencies.Any(ds => string.Compare(_ds.Id, ds.Id, true) == 0))))
               Log.LogWarning("Same dependency reference found in .nuspec (with targetFramework) and in referenced projects (without targetFrameWork), dependency reference from the referenced project is skipped!");
            else
               builder.DependencySets.Add(pds);
         foreach (var prjFactory in projectFactoriesToAddAsLibraries)
            AddFile(builder, prjFactory.TargetPath, null);
         #endregion
      }
      /// <summary>
      /// Adds project references to the package lib/tools/content section
      /// </summary>
      /// <param name="builder">
      /// The current package builder
      /// </param>
      private void AddLibraries (NuGet.PackageBuilder builder)
      {
         foreach (var libItem in this.ReferenceLibraries)
            AddFile(builder, libItem.GetMetadata("FullPath"), libItem.GetMetadata("NuBuildTargetFolder"));
      }
      private void AddFile(NuGet.PackageBuilder builder, string srcPath, string customFolder)
      {
         // add package files from project references
         // . DLL references go in the lib package folder
         // . EXE references go in the tools package folder
         // . everything else goes in the content package folder
         // . folders may be overridden using NuBuildTargetFolder metadata (lib\net40, etc.)
         // . folders may be overridden using TargetFramework attribute (lib\net40, etc.)
         var srcExt = Path.GetExtension(srcPath).ToLower();
         var tgtFolder = "content";
         var hasPdb = false;
         if (srcExt == ".dll")
         {
            tgtFolder = "lib";
            hasPdb = true;
         }
         else if (srcExt == ".exe")
         {
            tgtFolder = "tools";
            hasPdb = true;
         }
         // apply the custom folder override on the reference, or based on TargetFramework
         if (!String.IsNullOrWhiteSpace(customFolder))
            tgtFolder = customFolder;
         else if (AddBinariesToSubfolder)
            try
            {
               var targetFrameworkName = AssemblyReader.Read(srcPath).TargetFrameworkName;
               if (!String.IsNullOrWhiteSpace(targetFrameworkName))
                  tgtFolder = Path.Combine(tgtFolder, VersionUtility.GetShortFrameworkName(new FrameworkName(targetFrameworkName)));
            }
            catch { }
         // add the source library file to the package
         builder.Files.Add(
            new NuGet.PhysicalPackageFile()
            {
               SourcePath = srcPath,
               TargetPath = String.Format(
                  @"{0}\{1}",
                  tgtFolder,
                  Path.GetFileName(srcPath)
               )
            }
         );
         // add PDBs if specified and exist
         if (hasPdb && this.IncludePdbs)
         {
            var pdbPath = Path.ChangeExtension(srcPath, ".pdb");
            if (File.Exists(pdbPath))
               builder.Files.Add(
                  new NuGet.PhysicalPackageFile()
                  {
                     SourcePath = pdbPath,
                     TargetPath = String.Format(
                        @"{0}\{1}",
                        tgtFolder,
                        Path.GetFileName(pdbPath)
                     )
                  }
               );
         }
      }
      /// <summary>
      /// Adds embedded resources to the package tools/content section
      /// </summary>
      /// <param name="builder">
      /// The current package builder
      /// </param>
      private void AddEmbedded(NuGet.PackageBuilder builder)
      {
         // add package files from project embedded resources
         foreach (var fileItem in this.Embedded)
         {
            // only link items has Link metadata, that is the path, where the link itself is located (not the referred item)
            var tgtPath = fileItem.GetMetadata("Link");
            // if it is not a link, handle as normal file
            if (String.IsNullOrEmpty(tgtPath))
               tgtPath = fileItem.GetMetadata("Identity");
            if (tgtPath.IndexOf('\\') == -1)
               // warning if file is not in a subfolder
               Log.LogWarning(
                  "The source item '{0}' is not a valid content! Files has to be in a subfolder, like content or tools! File skipped.",
                  tgtPath);
            else
            {
               // determine pre package processing necessity
               var prePackProc = tgtPath.EndsWith(".ppp");
               if (prePackProc)
                  tgtPath = tgtPath.Substring(0, tgtPath.Length - 4);
               // create the source file
               var file = prePackProc ? new TokenProcessingPhysicalPackageFile(this) : new PhysicalPackageFile();
               file.SourcePath = fileItem.GetMetadata("FullPath");
               file.TargetPath = tgtPath;
               // add the source file to the package
               builder.Files.Add(file);
            }
         }
      }

      #region IPropertyProvider Implementation
      /// <summary>
      /// Retrieves nuget replacement values from a referenced
      /// assembly library or MSBuild property, as specified here:
      /// http://docs.nuget.org/docs/reference/nuspec-reference#Replacement_Tokens
      /// </summary>
      /// <param name="property">
      /// The replacement property to retrieve
      /// </param>
      /// <returns>
      /// The replacement property value
      /// </returns>
      public dynamic GetPropertyValue (String property)
      {
         if (property == "version" && !String.IsNullOrEmpty(version))
            return version;
         else
            return propertyProvider.GetPropertyValue(property);
      }
      #endregion
   }
}
